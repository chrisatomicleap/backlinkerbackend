name: Deploy to AWS App Runner

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: web-scraper-backend
  APP_NAME: web-scraper-backend

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: true

      - name: Create ECR repository if not exists
        run: |
          aws ecr describe-repositories --repository-names ${ECR_REPOSITORY} || aws ecr create-repository --repository-name ${ECR_REPOSITORY}

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          docker build \
            --build-arg OPENAI_API_KEY=${OPENAI_API_KEY} \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Deploy to App Runner
        run: |
          # Check if service exists
          SERVICE_ARN=$(aws apprunner list-services --query "ServiceSummaryList[?ServiceName=='${{ env.APP_NAME }}'].ServiceArn" --output text)
          
          if [ -z "$SERVICE_ARN" ]; then
            # Create new service
            aws apprunner create-service --cli-input-json '{
              "ServiceName": "${{ env.APP_NAME }}",
              "SourceConfiguration": {
                "AuthenticationConfiguration": {
                  "AccessRoleArn": "${{ secrets.APPRUNNER_SERVICE_ROLE_ARN }}"
                },
                "ImageRepository": {
                  "ImageIdentifier": "${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}",
                  "ImageRepositoryType": "ECR",
                  "ImageConfiguration": {
                    "Port": "5000",
                    "RuntimeEnvironmentVariables": {
                      "OPENAI_API_KEY": "${{ secrets.OPENAI_API_KEY }}"
                    }
                  }
                },
                "AutoDeploymentsEnabled": true
              },
              "InstanceConfiguration": {
                "Cpu": "1 vCPU",
                "Memory": "2 GB",
                "InstanceRoleArn": "${{ secrets.APPRUNNER_SERVICE_ROLE_ARN }}"
              },
              "HealthCheckConfiguration": {
                "Protocol": "HTTP",
                "Path": "/health",
                "Interval": 10,
                "Timeout": 5,
                "HealthyThreshold": 1,
                "UnhealthyThreshold": 5
              }
            }'
          else
            # Update existing service
            aws apprunner update-service --cli-input-json '{
              "ServiceArn": "'"$SERVICE_ARN"'",
              "SourceConfiguration": {
                "ImageRepository": {
                  "ImageIdentifier": "${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}",
                  "ImageRepositoryType": "ECR",
                  "ImageConfiguration": {
                    "Port": "5000",
                    "RuntimeEnvironmentVariables": {
                      "OPENAI_API_KEY": "${{ secrets.OPENAI_API_KEY }}"
                    }
                  }
                }
              }
            }'
          fi
